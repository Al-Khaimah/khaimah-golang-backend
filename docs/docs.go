// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/all-users": {
            "get": {
                "description": "Returns a list of all users (only accessible by admins)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users (admin only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UserProfileDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/admin/mark-user-admin/:user_id": {
            "post": {
                "description": "Grants admin privileges to a specific user (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Mark a user as admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to promote",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User marked as admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/admin/user/:id": {
            "delete": {
                "description": "Deletes any user by ID (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login payload",
                        "name": "loginDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.LoginRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.LoginResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Invalidates the current JWT token (if any) and logs out",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Logout current user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/send-otp": {
            "post": {
                "description": "Send a one-time password to the provided email or mobile number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Send OTP to email or mobile",
                "parameters": [
                    {
                        "description": "Send OTP request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.SendOTPRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_base.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_base.Response"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Registers a user with first name, last name, email, categories, and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Signup payload",
                        "name": "signupDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.SignupRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.SignupRequestDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.SignupRequestDTO"
                        }
                    }
                }
            }
        },
        "/auth/verify-otp": {
            "post": {
                "description": "Verify the OTP sent to email or mobile and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify OTP and get token",
                "parameters": [
                    {
                        "description": "Verify OTP request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.VerifyOTPRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_base.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_base.Response"
                        }
                    }
                }
            }
        },
        "/user/bookmarks": {
            "get": {
                "description": "Retrieves a list of podcasts bookmarked by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get bookmarked podcasts of current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.GetUserBookmarksResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "description": "Returns profile info for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get profile of current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UserProfileDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates first name and/or last name of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update profile of current user",
                "parameters": [
                    {
                        "description": "Fields to update",
                        "name": "updateDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UpdateProfileDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UserProfileDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/profile/delete-my-account": {
            "delete": {
                "description": "Deletes the authenticated user's account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user's account",
                "responses": {
                    "200": {
                        "description": "تم حذف حساب المستخدم بنجاح",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/profile/password": {
            "patch": {
                "description": "Changes the password of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Old and new passwords",
                        "name": "passwordDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.ChangePasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/profile/preferences": {
            "patch": {
                "description": "Updates the authenticated user's categories/preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user preferences",
                "parameters": [
                    {
                        "description": "New categories list",
                        "name": "preferencesDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UpdatePreferencesDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UpdatePreferencesResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_base.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {},
                "message_description": {
                    "type": "string"
                },
                "message_title": {
                    "type": "string"
                },
                "message_type": {
                    "type": "string"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_categories_dtos.Category": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_news_intensive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_categories_models.Category": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_news_intensive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_podcasts_dtos.PodcastDto": {
            "type": "object",
            "properties": {
                "audio_url": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "cover_image_description": {
                    "type": "string"
                },
                "cover_image_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "is_bookmarked": {
                    "type": "boolean"
                },
                "is_completed": {
                    "type": "boolean"
                },
                "is_downloaded": {
                    "type": "boolean"
                },
                "is_trending": {
                    "type": "boolean"
                },
                "likes_count": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.ChangePasswordDTO": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "NewPa55word"
                },
                "old_password": {
                    "type": "string",
                    "example": "OldPa55"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.GetUserBookmarksResponseDTO": {
            "type": "object",
            "properties": {
                "podcasts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_podcasts_dtos.PodcastDto"
                    }
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.LoginRequestDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "Pa55word"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.LoginResponseDTO": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_categories_models.Category"
                    }
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2025-06-05T15:04:05Z"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "abcd1234"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1Ni..."
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.SendOTPRequestDTO": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"9d671bac-17b0-42cf-b68a-aa908f30b134\"]"
                    ]
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "Ziyad"
                },
                "mobile": {
                    "type": "string",
                    "example": "+9665XXXXXXX"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.SignupRequestDTO": {
            "type": "object",
            "required": [
                "categories",
                "email",
                "first_name",
                "password"
            ],
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"f6a75a87-d695-4ee9-a095-5a79edce4eb8\"",
                        "\"1db71f60-f276-431d-934c-fd84f8014566\"]"
                    ]
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "example": "Pa55word"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UpdatePreferencesDTO": {
            "type": "object",
            "required": [
                "categories"
            ],
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"sports\"",
                        "\"music\"]"
                    ]
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UpdatePreferencesResponseDTO": {
            "type": "object",
            "properties": {
                "categories": {
                    "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_categories_dtos.Category"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UpdateProfileDTO": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "Johnny"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doey"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.UserProfileDTO": {
            "type": "object",
            "required": [
                "categories"
            ],
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_categories_models.Category"
                    }
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "abcd1234"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "github_com_Al-Khaimah_khaimah-golang-backend_internal_modules_users_dtos.VerifyOTPRequestDTO": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "mobile": {
                    "type": "string",
                    "example": "+9665XXXXXXX"
                },
                "otp": {
                    "type": "string",
                    "example": "1234"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
